package main

import (
	"flag"
	"fmt"
	"math"
	"strings"
)

var DBFILENAME string = "/var/log/ease/cve.db"

//定义OpenEulerCVE模型，绑定users表，ORM库操作数据库，需要定义一个struct类型和MYSQL表进行绑定或者叫映射，struct字段和MYSQL表字段一一对应
//在这里OpenEulerCVE类型可以代表mysql users表
//通过在字段后面的标签说明，定义golang字段和表字段的关系
//例如 `gorm:"column:username"` 标签说明含义是: Mysql表的列名（字段名)为username
//这里golang定义的OpenEulerCVEname变量和MYSQL表字段username一样，他们的名字可以不一样。
type OpenEulerCVE struct {
	ID                           int64   `gorm:"column:id" json:"id"`
	AFFECTEDPRODUCT              string  `gorm:"column:affectedProduct" json:"affectedProduct"`
	ANNOUNCEMENTTIME             string  `gorm:"column:announcementTime" json:"announcementTime"`
	ATTACKCOMPLEXITYNVD          string  `gorm:"column:attackComplexityNVD" json:"attackComplexityNVD"`
	ATTACKCOMPLEXITYOE           string  `gorm:"column:attackComplexityOE" json:"attackComplexityOE"`
	ATTACKVECTORNVD              string  `gorm:"column:attackVectorNVD" json:"attackVectorNVD"`
	ATTACKVECTOROE               string  `gorm:"column:attackVectorOE" json:"attackVectorOE"`
	AVAILABILITYNVD              string  `gorm:"column:availabilityNVD" json:"availabilityNVD"`
	AVAILABILITYOE               string  `gorm:"column:availabilityOE" json:"availabilityOE"`
	CONFIDENTIALITYNVD           string  `gorm:"column:confidentialityNVD" json:"confidentialityNVD"`
	CONFIDENTIALITYOE            string  `gorm:"column:confidentialityOE" json:"confidentialityOE"`
	CVEID                        string  `gorm:"column:cveId" json:"cveId"`
	CVRF                         string  `gorm:"column:cvrf" json:"cvrf"`
	CVSSSCORENVD                 string `gorm:"column:cvsssCoreNVD;" json:"cvsssCoreNVD"`
	CVSSSCOREOE                  string `gorm:"column:cvsssCoreOE;" json:"cvsssCoreOE"`
	INTEGRITYNVD                 string  `gorm:"column:integrityNVD" json:"integrityNVD"`
	INTEGRITYOE                  string  `gorm:"column:integrityOE" json:"integrityOE"`
	NATIONALCYBERAWARENESSSYSTEM string  `gorm:"column:nationalCyberAwarenessSystem" json:"nationalCyberAwarenessSystem"`
	PACKAGELIST                  string  `gorm:"column:packageList" json:"packageList"`
	PARSERBEAN                   string  `gorm:"column:parserBean" json:"parserBean"`
	PRIVILEGESREQUIREDNVD        string  `gorm:"column:privilegesRequiredNVD" json:"privilegesRequiredNVD"`
	PRIVILEGESREQUIREDOE         string  `gorm:"column:privilegesRequiredOE" json:"privilegesRequiredOE"`
	SCOPENVD                     string  `gorm:"column:scopeNVD" json:"scopeNVD"`
	SCOPEOE                      string  `gorm:"column:scopeOE" json:"scopeOE"`
	SECURITYNOTICENO             string  `gorm:"column:securityNoticeNo" json:"securityNoticeNo"`
	STATUS                       string  `gorm:"column:status" json:"status"`
	SUMMARY                      string  `gorm:"column:summary" json:"summary"`
	TYPE                         string  `gorm:"column:type" json:"type"`
	UPDATETIME                   string  `gorm:"column:updateTime" json:"updateTime"`
	USERINTERACTIONNVD           string  `gorm:"column:userInteractionNVD" json:"userInteractionNVD"`
	USERINTERACTIONOE            string  `gorm:"column:userInteractionOE" json:"userInteractionOE"`
	PACKAGENAME                  string  `gorm:"column:packageName" json:"packageName"`
}

func main() {
	// 参数处理
	var updateFlag bool
	var listFlag bool
	var outputTop10Flag bool
	var outputTop1Flag bool
	var dbPath string
	var searchStr string
	var reverseFlag bool
	var showTotalFlag bool
	var showNumber int

	flag.IntVar(&showNumber, "n", 0, "Output the NUM lines")
	flag.BoolVar(&reverseFlag, "r", false, "Reverse output") // false默认开头为最新
	flag.BoolVar(&updateFlag, "u", false, "Update metadata")
	flag.StringVar(&dbPath, "o", DBFILENAME, "Specific sqlite3 path")
	flag.StringVar(&searchStr, "s", "", "Search info")
	flag.BoolVar(&listFlag, "l", false, "List CVE info")
	flag.BoolVar(&outputTop10Flag, "10", false, "Show top 10 cve")
	flag.BoolVar(&outputTop1Flag, "1", false, "Show top 1 cve")
	flag.BoolVar(&showTotalFlag, "t", false, "Show total record numver")
	flag.Parse()

	// 更新csv优先执行，不会考虑其他参数
	if true == updateFlag {
		url := "https://www.openeuler.org/api-cve/cve-security-notice-server/cvedatabase/findAll"
		page := 1
		size := 1
		data := make([]OpenEulerCVE, 0)

		//fmt.Println("url: ", url)
		// {"keyword":"","status":"","pages":{"page":1,"size":100}}
		post := fmt.Sprintf(`{"keyword":"","status":"","pages":{"page":%d,"size":%d}}`, page, size)
		total, err := getTotal(url, post)
		if err != nil {
			fmt.Println("get total failed!", err)
			return
		}
		fmt.Println("query total:", total)
		// sanity check
		if 0 == total {
			panic("scrapy from OpenEuler Community return 0 data,maybe api changed!")
		}

		size = 100
		// {"keyword":"","status":"","pages":{"page":1,"size":100}}
		for ; float64(page) < math.Ceil(float64(total)/float64(size))+1; page += 1 {
			post = fmt.Sprintf(`{"keyword":"","status":"","pages":{"page":%d,"size":%d}}`, page, size)
			//fmt.Println(url, "post", post)
			data = append(data, getCVE(url, post)...)
			//fmt.Println("scrapy from OpenEuler : ", len(data))
		}
		// sanity check
		if 0 == len(data) {
			panic("scrapy from OpenEuler Community return 0 data,maybe api changed!")
		}
		// 如果有内容，则重建数据库表记录下来
		if err := RecreateDBTable(&OpenEulerCVE{}); err != nil {
			panic(err.Error())
		}

		for _, item := range data {
			if err := AddRecord(item); err != nil {
				panic(err.Error())
			}
		}

		fmt.Println("scrapy total:", len(data))
		if len(data) == int(total) {
			fmt.Println("SUCCESS")
		} else {
			fmt.Println("FAILED")
		}
		return
	}

	if true == showTotalFlag {
		oecList, error := QueryRecord()
		if error != nil {
			panic(error.Error())
		}
		dataNum := len(oecList)
		fmt.Println(dataNum)
		return
	}

	if true == outputTop10Flag {
		oecList, error := QueryRecord()
		if error != nil {
			panic(error.Error())
		}
		dataNum := len(oecList)
		if 0 >= dataNum {
			fmt.Println("no data find!")
			return
		}
		// 限制打印最近10个CVE信息
		dataToShow := dataNum
		if dataNum >= 10 {
			dataToShow = 10
		}

		// 正向显示，ID大的先显示
		for i := len(oecList) - 1; i > len(oecList)-1-dataToShow; i-- {
			fmt.Println(oecList[i].String())
		}
		return
	}

	if true == outputTop1Flag {
		oecList, error := QueryRecord()
		if error != nil {
			panic(error.Error())
		}
		dataNum := len(oecList)
		if 0 >= dataNum {
			fmt.Println("no data find!")
			return
		}
		// 限制打印最近10个CVE信息
		dataToShow := dataNum
		if dataNum >= 1 {
			dataToShow = 1
		}

		// 正向显示，ID大的先显示
		for i := len(oecList) - 1; i > len(oecList)-1-dataToShow; i-- {
			fmt.Println(oecList[i].String())
		}
		return
	}

	// 是否罗列数据
	if true == listFlag {
		oecList, error := QueryRecord()
		if error != nil {
			panic(error.Error())
		}
		dataNum := len(oecList)
		if 0 >= dataNum {
			fmt.Println("no data find!")
			return
		}

		dataToShow := len(oecList)
		if 0 > showNumber {
			return
		}
		if showNumber < len(oecList) && showNumber > 0 {
			dataToShow = showNumber
		}

		if true == reverseFlag {
			for i := 0; i <= dataToShow-1; i++ {
				fmt.Println(oecList[i].String())
			}
		} else {
			for i := len(oecList) - 1; i > len(oecList)-1-dataToShow; i-- {
				fmt.Println(oecList[i].String())
			}
		}
		return
	}

	// 是否检索数据
	if "" != searchStr {
		oecList, error := QueryRecord()
		if error != nil {
			panic(error.Error())
		}
		dataNum := len(oecList)
		if 0 >= dataNum {
			fmt.Println("no data find!")
			return
		}
		for _, item := range oecList {
			if strings.Contains(item.String(), searchStr) {
				fmt.Println(item.String())
			}
		}
		return
	}
	flag.PrintDefaults()
}

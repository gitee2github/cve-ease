package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/mitchellh/mapstructure"
	"io/ioutil"
	"net/http"
	"strconv"
)

func respBodyToString(data []byte) string {
	var str bytes.Buffer
	_ = json.Indent(&str, []byte(data), "", "    ")
	//fmt.Println("formated: ", str.String())
	return str.String()
}

func respBodyToMap(data []byte) map[string]interface{} {
	var tempMap map[string]interface{}
	err := json.Unmarshal([]byte(data), &tempMap)
	if err != nil {
		panic(err)
	}
	return tempMap
}

func mapToStrut(data interface{}) (OpenEulerCVE, error) {
	var o OpenEulerCVE
	dataMap, ok := data.(map[string]interface{})
	if !ok {
		return o, errors.New("convert interface to map failed! maybe api changed")
	}
	mapstructure.Decode(dataMap, &o)
	//fmt.Printf("%#v\n", o.CVSSSCORENVD)
	return o, nil
}

func getTotal(url, requestJson string) (total float64, err error) {
	var jsonStr = []byte(requestJson)
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonStr))
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	dataMap := respBodyToMap(body)
	if value, ok := dataMap["result"].(map[string]interface{})["totalCount"]; ok {
		return value.(float64), nil
	}
	return -1, errors.New("Get total failed!")
}

func getCVE(url, requestJson string) []OpenEulerCVE {
	var jsonStr = []byte(requestJson)

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonStr))
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	// json数据转为map
	dataMap := respBodyToMap(body)

	// 提取数组cveDatabaseList
	dataArray, err := getArray(dataMap)
	if err != nil {
		panic(err.Error())
	}

	// map数组转为struct
	oecObjects := make([]OpenEulerCVE, 0)
	for _, item := range dataArray {
		obj, err := mapToStrut(item)
		if err != nil {
			// 遇到解析错误情况，尽可能解析其他，不直接错误
			panic(err.Error)
		}
		oecObjects = append(oecObjects, obj)
	}
	return oecObjects
}

func getArray(dataMap map[string]interface{}) ([]interface{}, error) {
	if result, ok := dataMap["result"]; ok {
		if cveDatabaseList, ok := result.(map[string]interface{})["cveDatabaseList"]; ok {
			return cveDatabaseList.([]interface{}), nil
		}
	}
	return nil, errors.New("no cveDatabaseList found in json, maybe api changed!")
}

func parseItem(item interface{}) OpenEulerCVE {
	o := OpenEulerCVE{}
	fmt.Println()
	//fmt.Println(item)
	if mapData, ok := item.(map[string]interface{}); ok {
		//fmt.Println(mapData)
		if segment, ok := mapData["cveId"]; ok {
			fmt.Println("cveId :", segment)
		}
		if segment, ok := mapData["summary"]; ok {
			fmt.Println("summary :", segment)
		}
		if segment, ok := mapData["cvsssCoreNVD"]; ok {
			fmt.Println("cvsssCoreNVD :", segment)
		}
		if segment, ok := mapData["announcementTime"]; ok {
			fmt.Println("announcementTime :", segment)
		}
		if segment, ok := mapData["updateTime"]; ok {
			fmt.Println("updateTime :", segment)
		}
		if segment, ok := mapData["status"]; ok {
			fmt.Println("status :", segment)
		}
		if segment, ok := mapData["id"]; ok {
			fmt.Println("id :", segment)
		}
		//str,err := json.Marshal(mapData)
		//if err!= nil {
		//    panic("to json failed!")
		//}
		//fmt.Println(string(str))
	}
	return o
}

//设置表名，可以通过给struct类型定义 TableName函数，返回当前struct绑定的mysql表名是什么
func (o OpenEulerCVE) TableName() string {
	//绑定MYSQL表名为users
	return "OpenEulerCVE"
}

//设置表名，可以通过给struct类型定义 TableName函数，返回当前struct绑定的mysql表名是什么
func (o OpenEulerCVE) ToStringSlice() []string {
	//绑定MYSQL表名为users
	// fmt.Printf("%#v\n",o.CVSSSCORENVD)
	return []string{
		strconv.FormatInt(o.ID, 10),
		o.CVEID,
		o.SUMMARY,
		o.PACKAGENAME,
		o.CVSSSCORENVD,
		//strconv.FormatFloat(o.CVSSSCORENVD, 'f', -1, 64),
		o.ANNOUNCEMENTTIME,
		o.UPDATETIME,
		o.STATUS,
	}
}

//设置表名，可以通过给struct类型定义 TableName函数，返回当前struct绑定的mysql表名是什么
func (o OpenEulerCVE) String() string {
	//绑定MYSQL表名为users
	// fmt.Printf("%#v\n",o.CVSSSCORENVD)
	return fmt.Sprintf(
		`ID: %s
CVEID: %s
SUMMARY: %s
PACKAGENAME: %s
CVSSSCORENVD: %s
ANNOUNCEMENTTIME: %s
UPDATETIME: %s
STATUS: %s
				`,
		strconv.FormatInt(o.ID, 10),
		o.CVEID,
		o.SUMMARY,
		o.PACKAGENAME,
		o.CVSSSCORENVD,
		//strconv.FormatFloat(o.CVSSSCORENVD, 'f', -1, 64),
		o.ANNOUNCEMENTTIME,
		o.UPDATETIME,
		o.STATUS,
	)
}

//设置表名，可以通过给struct类型定义 TableName函数，返回当前struct绑定的mysql表名是什么
func CSVToString(item []string) string {
	//绑定MYSQL表名为users
	// fmt.Printf("%#v\n",o.CVSSSCORENVD)
	return fmt.Sprintf(
		`ID: %s
CVEID: %s
SUMMARY: %s
PACKAGENAME: %s
CVSSSCORENVD: %s
ANNOUNCEMENTTIME: %s
UPDATETIME: %s
STATUS: %s
				`,
		item[0],
		item[1],
		item[2],
		item[3],
		item[4],
		item[5],
		item[6],
		item[7],
	)

}

//设置表名，可以通过给struct类型定义 TableName函数，返回当前struct绑定的mysql表名是什么
func CSVToStringShort(item []string) string {
	//绑定MYSQL表名为users
	// fmt.Printf("%#v\n",o.CVSSSCORENVD)
	return fmt.Sprintf(
		`%s - %s
  [%s] %s`,
		item[1],
		item[3],
		item[4],
		item[6],
	)

}

# -*- coding: utf-8 -*-

"""
 (c) 2022 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""

import datetime
import requests
import json

from flask import Flask
from flask_sqlalchemy import SQLAlchemy


#
# class OpenEulerNotice(db.Model):
#     __tablename__ = 'OpenEulerNotice'
#     id = db.Column('id', db.Integer, primary_key=True)
#     affectedComponent = db.Column('affectedComponent', db.Text)
#     affectedProduct = db.Column('affectedProduct', db.Text)
#     announcementTime = db.Column('announcementTime', db.Text)
#     cveId = db.Column('cveId', db.Text)
#     description = db.Column('description', db.Text)
#     introduction = db.Column('introduction', db.Text)
#     packageName = db.Column('packageName', db.Text)
#     referenceDocuments = db.Column('referenceDocuments', db.Text)
#     revisionHistory = db.Column('revisionHistory', db.Text)
#     securityNoticeNo = db.Column('securityNoticeNo', db.Text)
#     subject = db.Column('subject', db.Text)
#     summary = db.Column('summary', db.Text)
#     type = db.Column('type', db.Text)
#     updateTime = db.Column('updateTime', db.Text)
#     cvrf = db.Column('cvrf', db.Text)
#     # packageHelperList = db.Column('packageHelperList', db.Text)
#     # packageList = db.Column('packageList', db.Text)
#     # referenceList = db.Column('referenceList', db.Text)
#     # cveList = db.Column('cveList', db.Text)


class OpenEulerNotice:
    def __init__(self):
        pass

    def scrapy(self):
        pass


class CVE:
    COLUMN = [
        "id",
        "affectedProduct",
        "announcementTime",
        "attackComplexityNVD",
        "attackComplexityOE",
        "attackVectorNVD",
        "attackVectorOE",
        "availabilityNVD",
        "availabilityOE",
        "confidentialityNVD",
        "confidentialityOE",
        "cveId",
        "cvsssCoreNVD",
        "cvsssCoreOE",
        "integrityNVD",
        "integrityOE",
        "nationalCyberAwarenessSystem",
        "packageName",
        "privilegesRequiredNVD",
        "privilegesRequiredOE",
        "scopeNVD",
        "scopeOE",
        "status",
        "summary",
        "type",
        "userInteractionNVD",
        "userInteractionOE",
        "createTime",
        "updateTime",
        "securityNoticeNo",
        "parserBean",
        "cvrf",
        "packageList",
    ]

    def __init__(self, config):
        self.config = config
        pass

    def prune_sql_table(self):
        pass

    def scrapy(self):
        api_url = 'https://www.openeuler.org/api-cve/cve-security-notice-server/cvedatabase/findAll'
        body = {"keyword": "", "status": "", "pages": {"page": 1, "size": 1000000}}
        try:
            response = requests.post(url=api_url, json=body)
            response_json_dict = json.loads(response.text)
        except Exception as e:
            print("scrapy from api '%s' error!" % api_url, str(e))
            exit(1)
        return response_json_dict

    def compare(self, response_json_dict):
        cveDatabaseList = []
        diff = {
            "modify": [],
            "new": [],
        }
        if 'result' in response_json_dict and 'cveDatabaseList' in response_json_dict['result']:
            cveDatabaseList = response_json_dict['result']['cveDatabaseList']
        else:
            print("scrapy data format error! no cveDatabaseList found!")
            exit(1)
        timestamp = datetime.datetime.now()

        """use flask sqlalchemy orm"""
        app = Flask(__name__)
        app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///%s' % self.config.get('main', 'db_file_path')
        db = SQLAlchemy(app)

        class OpenEulerCVEScrapy(db.Model):
            __tablename__ = 'OpenEulerCVEScrapy'
            id = db.Column("id", db.Integer, primary_key=True)
            code = db.Column("code", db.Integer)
            msg = db.Column("msg", db.Text)
            totalCount = db.Column('totalCount', db.Integer)
            cveDatabaseList = db.Column("cveDatabaseList", db.Text)
            """extra var"""
            status = db.Column("status", db.Integer)
            refDB = db.Column("refDB", db.Text)
            created_at = db.Column("created_at", db.DateTime, default=datetime.datetime.now)

            @staticmethod
            def get_instance_from_scrapy(dict_data, timestamp):
                new_obj = OpenEulerCVEScrapy()
                new_obj.code = dict_data['code']
                new_obj.msg = dict_data['msg']
                new_obj.created_at = timestamp
                new_obj.totalCount = dict_data["result"]['totalCount']
                new_obj.cveDatabaseList = json.dumps(dict_data["result"]["cveDatabaseList"])
                return new_obj

            def obj_to_dict(self):
                return {
                    "id": self.id,
                    "code": self.code,
                    "msg": self.msg,
                    "timestamp": self.timestamp,
                    "result": {
                        "totalCount": self.totalCount,
                        "securityNoticeList": [],
                        "cveDatabaseList": json.loads(self.cveDatabaseList)
                    }
                }

        new_cve_table = 'OpenEulerCVE-' + timestamp.strftime("%Y%m%d-%H%M%S")

        class OpenEulerCVE(db.Model):
            __tablename__ = new_cve_table
            id = db.Column('id', db.Integer, primary_key=True)
            affectedProduct = db.Column('affectedProduct', db.Text)
            announcementTime = db.Column('announcementTime', db.Text)
            attackComplexityNVD = db.Column('attackComplexityNVD', db.Text)
            attackComplexityOE = db.Column('attackComplexityOE', db.Text)
            attackVectorNVD = db.Column('attackVectorNVD', db.Text)
            attackVectorOE = db.Column('attackVectorOE', db.Text)
            availabilityNVD = db.Column('availabilityNVD', db.Text)
            availabilityOE = db.Column('availabilityOE', db.Text)
            confidentialityNVD = db.Column('confidentialityNVD', db.Text)
            confidentialityOE = db.Column('confidentialityOE', db.Text)
            cveId = db.Column('cveId', db.Text)
            cvrf = db.Column('cvrf', db.Text)
            cvsssCoreNVD = db.Column('cvsssCoreNVD', db.Text)
            cvsssCoreOE = db.Column('cvsssCoreOE', db.Text)
            integrityNVD = db.Column('integrityNVD', db.Text)
            integrityOE = db.Column('integrityOE', db.Text)
            nationalCyberAwarenessSystem = db.Column('nationalCyberAwarenessSystem', db.Text)
            packageList = db.Column('packageList', db.Text)
            parserBean = db.Column('parserBean', db.Text)
            privilegesRequiredNVD = db.Column('privilegesRequiredNVD', db.Text)
            privilegesRequiredOE = db.Column('privilegesRequiredOE', db.Text)
            scopeNVD = db.Column('scopeNVD', db.Text)
            scopeOE = db.Column('scopeOE', db.Text)
            securityNoticeNo = db.Column('securityNoticeNo', db.Text)
            status = db.Column('status', db.Text)
            summary = db.Column('summary', db.Text)
            type = db.Column('type', db.Text)
            updateTime = db.Column('updateTime', db.Text)
            userInteractionNVD = db.Column('userInteractionNVD', db.Text)
            userInteractionOE = db.Column('userInteractionOE', db.Text)
            packageName = db.Column('packageName', db.Text)

            def obj_to_dict(self):
                return {
                    "id": self.id,
                    "affectedProduct": self.affectedProduct,
                    "announcementTime": self.announcementTime,
                    "attackComplexityNVD": self.attackComplexityNVD,
                    "attackComplexityOE": self.attackComplexityOE,
                    "attackVectorNVD": self.attackVectorNVD,
                    "attackVectorOE": self.attackVectorOE,
                    "availabilityNVD": self.availabilityNVD,
                    "availabilityOE": self.availabilityOE,
                    "confidentialityNVD": self.confidentialityNVD,
                    "confidentialityOE": self.confidentialityOE,
                    "cveId": self.cveId,
                    "cvsssCoreNVD": self.cvsssCoreNVD,
                    "cvsssCoreOE": self.cvsssCoreOE,
                    "integrityNVD": self.integrityNVD,
                    "integrityOE": self.integrityOE,
                    "nationalCyberAwarenessSystem": self.nationalCyberAwarenessSystem,
                    "packageName": self.packageName,
                    "privilegesRequiredNVD": self.privilegesRequiredNVD,
                    "privilegesRequiredOE": self.privilegesRequiredOE,
                    "scopeNVD": self.scopeNVD,
                    "scopeOE": self.scopeOE,
                    "status": self.status,
                    "summary": self.summary,
                    "type": self.type,
                    "userInteractionNVD": self.userInteractionNVD,
                    "userInteractionOE": self.userInteractionOE,
                    "updateTime": self.updateTime,
                    "securityNoticeNo": self.securityNoticeNo,
                    "parserBean": self.parserBean,
                    "cvrf": self.cvrf,
                    "packageList": self.packageList,
                }

        class SQLITEMASTER(db.Model):
            __tablename__ = 'sqlite_master'
            type = db.Column('type', db.Text)
            name = db.Column('name', db.Text)
            tbl_name = db.Column('tbl_name', db.Integer, primary_key=True)
            sql = db.Column('sql', db.Text)

        with app.app_context():
            """may be empty db, always create at first"""
            if OpenEulerCVEScrapy.__tablename__ not in db.engine.table_names():
                OpenEulerCVEScrapy.__table__.create(db.engine)

            last_record = OpenEulerCVEScrapy.query.order_by(OpenEulerCVEScrapy.id.desc()).first()
            new_record = OpenEulerCVEScrapy.get_instance_from_scrapy(response_json_dict, timestamp)

            if not last_record:
                """db is empty"""
                print("first run")
                # 创建变更表
                OpenEulerCVE.__table__.create(db.engine)
                db.session.bulk_insert_mappings(OpenEulerCVE, cveDatabaseList)
                db.session.commit()

                new_record.status = 1
                new_record.refDB = new_cve_table
                db.session.add(new_record)
                db.session.commit()

                return False, diff, cveDatabaseList
            elif last_record.cveDatabaseList == new_record.cveDatabaseList:
                """no update"""
                print("no update")
                new_record.status = 0
                # 关联数据表不变
                new_record.refDB = last_record.refDB
                db.session.add(new_record)
                db.session.commit()
                return False, diff, cveDatabaseList
            else:
                """updated"""
                # 创建变更表
                print("updated, create new table")
                OpenEulerCVE.__table__.create(db.engine)
                db.session.bulk_insert_mappings(OpenEulerCVE, cveDatabaseList)
                db.session.commit()

                new_record.status = 1
                # 记录指向更表
                new_record.refDB = new_cve_table
                db.session.add(new_record)
                db.session.commit()

                diff = self.do_compare(new_record.cveDatabaseList, last_record.cveDatabaseList)

                return True, diff, cveDatabaseList

    def do_compare(self, newer_dict_list_str, last_dict_list_str):
        diff = {
            "modify": [],
            "new": [],
            "del": [],
            "data": [],
        }
        newer_dict_list = json.loads(newer_dict_list_str)
        last_dict_list = json.loads(last_dict_list_str)
        map_newer_dict_list = {}
        map_last_dict_list = {}

        for rd in newer_dict_list:
            map_newer_dict_list[rd["cveId"]] = rd
        for rd in last_dict_list:
            map_last_dict_list[rd["cveId"]] = rd

        for cveId in map_newer_dict_list.keys():
            if cveId not in map_last_dict_list:
                diff['new'].append(map_newer_dict_list[cveId])
                continue
            for key in map_newer_dict_list[cveId].keys():
                if map_newer_dict_list[cveId][key] != map_last_dict_list[cveId][key]:
                    diff['modify'].append(map_newer_dict_list[cveId])
                    break
        for cveId in map_last_dict_list.keys():
            if cveId not in map_newer_dict_list:
                diff['del'].append(map_last_dict_list[cveId])
        diff['data'] = newer_dict_list
        return diff

    def pretty_record(self, record):
        return """评分:[**<font color=\"red\">%s</font>**] %s 
  包名: %s
  发布时间: **%s**
  [详情链接](https://www.openeuler.org/zh/security/cve/detail/?cveId=%s&packageName=%s)
""" % (
            record["cvsssCoreNVD"] if record["cvsssCoreNVD"] else record["cvsssCoreOE"],
            record["cveId"],
            record["packageName"],
            record["updateTime"],
            record["cveId"],
            record["packageName"],
        )

    def pretty_status(self, records):
        message = "### Message from CTyunOS CVE-EASE: \n" + \
                  " %s" % datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒") + "\n" + \
                  "服务状态: **<font color=\"info\">OK</font>**" + "\n" + \
                  "记录总数: **<font color=\"red\">%s</font>**" % len(records) + "\n" + \
                  "近期Top10记录:" + "\n\n"
        newlist = sorted(records, key=lambda d: d['id'])
        for r in newlist[:-11:-1]:
            message += self.pretty_record(r)
        message += """

>相关同事请务必及时修复CVE漏洞，杜绝隐患确保系统安全。

#### **@游益锋(游益锋-基础架构中心-研发一部)**  **@吴开顺-基础架构中心-研发一部**
"""

        return message

    def pretty_udpate(self, diff):
        message = "### Message from CTyunOS CVE-EASE: \n" + \
                  " %s" % datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒") + "\n" + \
                  "服务状态: **<font color=\"info\">OK</font>**" + "\n" + \
                  "CVE记录总数: **<font color=\"red\">%s</font>**" % len(diff["data"]) + "\n" + \
                  "变动情况:\n" + \
                  "新增:**<font color=\"red\">%d</font>** 修改:**<font color=\"red\">%d</font>** 删除:**<font color=\"red\">%d</font>**" % (
                      len(diff["new"]), len(diff["modify"]), len(diff["del"])
                  ) + "\n" + \
                  "更新记录Top10:" + "\n\n"
        count = 10
        newlist = sorted(diff["new"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["del"], key=lambda d: d['id'])
        # 三种变动情况，只输出十条记录
        for r in newlist:
            if count == 0:
                break
            message += self.pretty_record(r)
            count -= 1

        for r in modifylist:
            if count == 0:
                break
            message += self.pretty_record(r)
            count -= 1

        for r in dellist:
            if count == 0:
                break
            message += self.pretty_record(r)
            count -= 1
        message += """

>相关同事请务必及时修复CVE漏洞，杜绝隐患确保系统安全。

#### **@游益锋(游益锋-基础架构中心-研发一部)**  **@吴开顺-基础架构中心-研发一部**
"""
        return message

.PHONY: default help version status build attach destroy daemon bin release fmt clean kill install uninstall gentarspec gensrpm rpmbuild

APP=cve-ease
VERSION=0.0.4
RELEASE=1
DOCKER_IMAGE=$(APP)-$(VERSION)
CONTAINER_NAME=$(APP)-$(VERSION)
DESTDIR=
RPM_DIR=/tmp/cve-ease-rpmbuild
PYTHON_LIB=$(shell python3 -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')
LIB_DIR=$(PYTHON_LIB)/cve_ease

default:
	@echo ""
	@echo "Makefile for CTyunOS $(APP)"
	@echo "Maintainer: youyifeng <youyf2@chinatelecom.cn>"
	@echo ""
	@echo "help        show help info(default)"
	@echo "status      show docker status"
	@echo "build       build docker image"
	@echo "attach      attach container"
	@echo "destroy     destroy container"
	@echo "daemon      start an container with daemon"
	@echo "clean       clean release file"
	@echo "kill        kill cve-ease-notifier program"
	@echo "install     install cve-ease directly"
	@echo "uninstall   uninstall cve-ease directly"
	@echo "gensrpm     generate srpm"
	@echo "gentarspec  generate archive tar.bz2 and spec file"
	@echo "rpmbuild    build binary rpm, store in /tmp/cve-ease-rpmbuild"

help: default

version:
	@echo "VERSION:$(VERSION)"
	@echo "RELEASE:$(RELEASE)"
	@echo "PYTHON_LIB:$(PYTHON_LIB)"
	@echo "APP_LIB:$(LIB_DIR)"

run:
	EASE_CONFIG=$(CONFIG_DIR)/cve-ease.cfg python3 cve-ease-notifier.py

debug:
	EASE_CONFIG=$(CONFIG_DIR)/cve-ease.cfg python3 cve-ease-notifier.py --debug

check:
	EASE_CONFIG=$(CONFIG_DIR)/cve-ease.cfg python3 cve-ease-notifier.py --debug --check

msgtest:
	EASE_CONFIG=$(CONFIG_DIR)/cve-ease.cfg python3 cve-ease-notifier.py --msgtest

kill:
	pkill -x cve-ease-notifier || :

install: kill bin setversion
	mkdir -p ${DESTDIR}/usr/bin &> /dev/null || :
	mkdir -p ${DESTDIR}/etc/cve-ease &> /dev/null || :
	mkdir -p ${DESTDIR}/usr/lib/systemd/system &> /dev/null || :
	mkdir -p ${DESTDIR}/var/log/cve-ease &> /dev/null || :
	mkdir -p ${DESTDIR}/$(LIB_DIR) &> /dev/null || :
	mkdir -p ${DESTDIR}/usr/share/cve-ease &> /dev/null || :
	install -v -m 644  cve-ease.cfg ${DESTDIR}/etc/cve-ease
	install -v -m 755  cve-ease.py ${DESTDIR}/usr/bin/cve-ease
	install -v -m 755  cve-ease-notifier.py ${DESTDIR}/usr/bin/cve-ease-notifier
	install -v -m 644  cve-ease.service ${DESTDIR}/usr/lib/systemd/system/
	install -v -m 644  cve-ease.timer ${DESTDIR}/usr/lib/systemd/system/
	install -D -v -m 644 lib/* ${DESTDIR}/$(LIB_DIR)/
	touch ${DESTDIR}/var/log/cve-ease/log
	#systemctl daemon-reload || :
	@echo "install done!"

uninstall:
	rm -f ${DESTDIR}/usr/bin/cve-ease
	rm -f ${DESTDIR}/usr/bin/cve-ease-notifier
	rm -f ${DESTDIR}/usr/lib/systemd/system/cve-ease.service
	rm -f ${DESTDIR}/usr/lib/systemd/system/cve-ease.timer
	rm -f ${DESTDIR}/$(LIB_DIR)
	systemctl daemon-reload || :

build:
	docker build -t $(DOCKER_IMAGE) .
	docker image ls $(DOCKER_IMAGE)
	@echo " docker build ok"

attach:
	docker exec -it $(CONTAINER_NAME) /bin/bash

destroy:
	docker container rm --force $(CONTAINER_NAME) || :

docker-purge:
	docker container ls -a | grep cve-ease | awk '{print $$1}' | xargs docker container rm --force &> /dev/null || :
	docker image ls | grep cve-ease | awk '{print $$3}' | xargs docker image rm &> /dev/null || :

docker-clean:
	docker container ls -a | grep cve-ease | awk '{print $$1}' | xargs docker container rm --force &> /dev/null || :

docker-shell: docker-clean build daemon
	docker exec -e PS1="[ cve-ease-docker@\w ]# " -it \
        $(CONTAINER_NAME) \
        /bin/bash

daemon:
	docker run -d --privileged \
        --name $(CONTAINER_NAME) \
        $(DOCKER_IMAGE) \
        /sbin/init
	@echo "daemon done!"

status:
	systemctl daemon-reload
	systemctl show cve-ease.timer --no-pager || :
	systemctl list-timers --all || :
	systemctl status --no-pager cve-ease.service cve-ease.timer -l || :

stop:
	systemctl daemon-reload || :
	systemctl stop cve-ease.service cve-ease.timer

restart:
	systemctl daemon-reload || :
	systemctl restart cve-ease.service cve-ease.timer

start:
	systemctl daemon-reload || :
	systemctl start cve-ease.service cve-ease.timer

watch:
	journalctl -xe -f -u cve-ease

setversion:
	@sed -i "/^VERSION = /c VERSION = '$(VERSION)'" cve-ease*.py
	@sed -i "/^RELEASE = /c RELEASE = '$(RELEASE)'" cve-ease*.py

gensrpm: setversion
	[ -d $(RPM_DIR) ] && rm -rf $(RPM_DIR) || :
	mkdir -p $(RPM_DIR)/{SOURCES,SRPMS}
	tar --exclude cve-ease.cfg.decrypt --transform "s/^./cve-ease-$(VERSION)/" -jcvf $(RPM_DIR)/SOURCES/cve-ease-$(VERSION).tar.bz2 .
	cp -a cve-ease.spec ../
	@sed -i "s/VERSION/$(VERSION)/g" ../cve-ease.spec
	@sed -i "s/RELEASE/$(RELEASE)/g" ../cve-ease.spec
	@type rpmbuild
	rpmbuild -D "_topdir $(RPM_DIR)"  -bs ../cve-ease.spec
	@mv $(RPM_DIR)/SRPMS/*.src.rpm ../
	@ls -alh ../*.src.rpm
	@echo "gensrpm done!"

gentarspec: setversion
	cp -a cve-ease.spec ../
	@sed -i "s/VERSION/$(VERSION)/g" ../cve-ease.spec
	@sed -i "s/RELEASE/$(RELEASE)/g" ../cve-ease.spec
	tar --exclude cve-ease.cfg.decrypt --transform "s/^./cve-ease-$(VERSION)/" -jcvf ../cve-ease-$(VERSION).tar.bz2 .
	@ls -alh ../*.spec ../*.tar.bz2
	@echo "gentarspec done!"

rpmbuild: gensrpm
	rpmbuild  --define "_topdir  $(RPM_DIR)" -ba ../cve-ease.spec
	find /tmp/cve-ease-rpmbuild/
	@echo "rpmbuild done!"

clean:
	rm -f release/* || :
	rm -f ../$(APP)*.src.rpm || :
	rm -f ../$(APP)*.bz2 || :
	rm -f ../$(APP).spec || :
	[ -d $(RPM_DIR) ] && rm -rf $(RPM_DIR) || :
	@echo "clean done!"


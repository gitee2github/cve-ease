.PHONY: default help version status build attach destroy daemon bin release fmt clean kill install uninstall gentarspec gensrpm

APP=cve-ease
VERSION=0.0.3
RELEASE=1
DOCKER_IMAGE=$(APP)-$(VERSION)
CONTAINER_NAME=$(APP)-$(VERSION)
DESTDIR=
RPM_DIR=/tmp/cve-ease-rpmbuild

default:
	@echo ""
	@echo "Makefile for $(APP) using docker image $(DOCKER_IMAGE)"
	@echo "maintainers: youyifeng <youyf2@chinatelecom.cn>"
	@echo ""
	@echo "help        show help info(default)"
	@echo "status      show docker status"
	@echo "build       build docker image"
	@echo "attach      attach container"
	@echo "destroy     destroy container"
	@echo "daemon      start an container with daemon"
	@echo "bin         build go src"
	@echo "release     strip go bin"
	@echo "fmt         format go src file"
	@echo "clean       clean release file"
	@echo "kill        kill ease-notify program"
	@echo "install     install cve-ease directly"
	@echo "uninstall   uninstall cve-ease directly"

help: default

version:
	@echo "VERSION: $(VERSION)"
	@echo "RELEASE: $(RELEASE)"

bin:
	mkdir release &> /dev/null || :
	go build -o release/$(APP) cve.go

release: all
	strip release/$(APP)

fmt:
	go fmt *.go

clean:
	rm -f release/* || :
	rm -f ../$(APP)*.src.rpm || :
	rm -f ../$(APP)*.bz2 || :
	rm -f ../$(APP).spec || :

kill:
	pkill -x ease-notify || :

install: kill bin
	mkdir -p ${DESTDIR}/usr/bin &> /dev/null || :
	mkdir -p ${DESTDIR}/etc/cve-ease &> /dev/null || :
	mkdir -p ${DESTDIR}/var/log/cve-ease &> /dev/null || :
	mkdir -p ${DESTDIR}/usr/lib/systemd/system &> /dev/null || :
	cp release/$(APP) ${DESTDIR}/usr/bin/
	cp notify.py ${DESTDIR}/usr/bin/ease-notify
	cp cve-ease.service ${DESTDIR}/usr/lib/systemd/system/
	touch ${DESTDIR}/var/log/cve-ease/log
	systemctl daemon-reload

uninstall:
	rm ${DESTDIR}/usr/bin/$(APP)
	rm ${DESTDIR}/usr/bin/ease-notify
	rm -rf ${DESTDIR}/var/log/cve-ease
	rm ${DESTDIR}/usr/lib/systemd/system/cve-ease.service
	systemctl daemon-reload

build:
	cp ../release/cve-ease-*.rpm . -a
	@echo " copy rpm ok"
	docker build -t $(DOCKER_IMAGE) .
	@echo " docker build ok"
	docker image ls $(DOCKER_IMAGE)

attach:
	docker exec -it $(CONTAINER_NAME) /bin/bash

destroy:
	docker container rm --force $(CONTAINER_NAME) || :

daemon:
	docker image ls -a
	docker run -d --privileged \
        --name $(CONTAINER_NAME) \
        $(DOCKER_IMAGE) \
        /sbin/init

status:
	systemctl status docker --no-pager
	docker image ls $(DOCKER_IMAGE)
	docker container ls --filter name=$(CONTAINER_NAME)
	@echo "All ok!"

gensrpm:
	[ -d $(RPM_DIR) ] && rm -rf $(RPM_DIR) || :
	mkdir -p $(RPM_DIR)/{SOURCES,SRPMS}
	tar --exclude cve-ease.cfg.decrypt --transform "s/^./cve-ease-$(VERSION)/" -jcvf $(RPM_DIR)/SOURCES/cve-ease-$(VERSION).tar.bz2 .
	cp -a cve-ease.spec ../ 
	@sed -i "s/VERSION/$(VERSION)/g" ../cve-ease.spec
	@sed -i "s/RELEASE/$(RELEASE)/g" ../cve-ease.spec
	@rpmbuild -D "_topdir $(RPM_DIR)"  -bs ../cve-ease.spec
	@mv $(RPM_DIR)/SRPMS/*.src.rpm ../
	@ls -alh ../*.src.rpm
	@echo "gensrpm done!"

gentarspec:
	cp -a cve-ease.spec ../ && sed -i "s/VERSION/$(VERSION)/g" ../cve-ease.spec
	tar --exclude cve-ease.cfg.decrypt --transform "s/^./cve-ease-$(VERSION)/" -jcvf ../cve-ease-$(VERSION).tar.bz2 .
	@ls -alh ../*.spec ../*.tar.bz2
	@echo "All done!"

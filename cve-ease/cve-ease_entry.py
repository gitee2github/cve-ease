# -*- coding: utf-8 -*-

"""
 (c) 2022 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""

import os
import argparse
import json
import datetime
import cve_ease as ce

VERSION = "0.1.0"

if "EASE_CONFIG" not in os.environ and os.path.exists(
        "/etc/cve-ease/cve-ease.cfg"
):
    print("Using configuration file `/etc/cve-ease/cve-ease.cfg`")
    os.environ["EASE_CONFIG"] = "/etc/cve-ease/cve-ease.cfg"

_config = ce.config.reload_config()


def main(check=False, debug=False):
    lock = ce.utils.one_instance_check(
        _config.get('main', 'lock_file_path')
    )
    if lock:
        raise Exception(f"Another ease already running")

    cve = ce.scrapy.CVE(_config)
    rawdata = cve.scrapy()

    # print(len(rawdata['result']['cveDatabaseList']))
    # with open('cve.json', 'w') as output:
    #     output.write(json.dumps(rawdata, indent=4))
    whether, diff, cveDatabaseList = cve.compare(rawdata)

    if check:
        """检查，显示更新 和 状态"""
        # print("Check, display output without send msg")
        if whether:
            # print("updated")
            # print("modify %d, update %d" % (len(diff["modify"]), len(diff["new"])))
            print(cve.pretty_udpate(diff))
        # print("get last record:", len(cveDatabaseList))
        print(cve.pretty_status(cveDatabaseList))
    else:
        """send msg"""
        """发送，更新 和 状态"""
        # print("not Check, call api send msg")
        if whether:
            # print("modify %d, update %d" % (len(diff["modify"]), len(diff["new"])))
            try:
                ce.notifier.wecom(_config, 'update_key').send_markdown(cve.pretty_udpate(diff))
                cve_data = ce.utils.data_to_csv(cveDatabaseList, ce.scrapy.CVE.COLUMN)
                ce.notifier.wecom(_config, 'update_key').send_file(cve_data, filename="CTyunOS CVE-EASE完整数据.csv")
                if len(diff["new"]) > 0:
                    new_cve_data = ce.utils.data_to_csv(diff["new"], ce.scrapy.CVE.COLUMN)
                    ce.notifier.wecom(_config, 'update_key').send_file(new_cve_data, filename="新增CVE漏洞数据.csv")
                if len(diff["modify"]) > 0:
                    modify_cve_data = ce.utils.data_to_csv(diff["modify"], ce.scrapy.CVE.COLUMN)
                    ce.notifier.wecom(_config, 'update_key').send_file(modify_cve_data, filename="修改CVE漏洞数据.csv")
                if len(diff["del"]) > 0:
                    del_cve_data = ce.utils.data_to_csv(diff["del"], ce.scrapy.CVE.COLUMN)
                    ce.notifier.wecom(_config, 'update_key').send_file(del_cve_data, filename="删除CVE漏洞数据.csv")
            except Exception as e:
                print("send msg failed!", str(e))
        # print("get last record:", len(cveDatabaseList))
        try:
            ce.notifier.wecom(_config, 'status_key').send_markdown(cve.pretty_status(cveDatabaseList))
        except Exception as e:
            print("send msg failed!", str(e))

    if debug:
        print("Done")


def do_msgtest():
    try:
        for key in ["status_key", "update_key"]:
            ce.notifier.wecom(_config, key).send_text(
                "CTyunOS cve-ese project %s\n%s\n测试text消息发送成功" % (VERSION, ce.utils.get_timestamp()),
                mentioned_mobile_list=["13518106436", "18161268463", "@all"]
            )
            ce.notifier.wecom(_config, key).send_markdown(
                "## CTyunOS cve-ese project %s\n%s\n测试markdown消息发送成功" % (VERSION, ce.utils.get_timestamp())

            )
            ce.notifier.wecom(_config, key).send_file(
                "CTyunOS cve-ese project %s\n%s\n测试文件消息发送成功" % (VERSION, ce.utils.get_timestamp()),
                filename="sample.txt"
            )
            cveDatabaseList = None
            cve = ce.scrapy.CVE(_config)
            response_json_dict = cve.scrapy()
            if 'result' in response_json_dict and 'cveDatabaseList' in response_json_dict['result']:
                cveDatabaseList = response_json_dict['result']['cveDatabaseList']
            else:
                print("scrapy data format error! no cveDatabaseList found!")
                exit(1)
            # for item in cveDatabaseList:
            #     print(len(item), item)
            #     break
            if cveDatabaseList:
                cve_data = ce.utils.data_to_csv(cveDatabaseList, ce.scrapy.CVE.COLUMN)
                ce.notifier.wecom(_config, 'update_key').send_file(cve_data, filename="CTyunOS CVE-EASE完整数据.csv")
            else:
                print("cveDatabaseList is None")
    except Exception as e:
        print("send msg failed!", str(e))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="CTyunOS CVE-EASE project"
    )
    parser.add_argument(
        "--check",
        dest="check",
        action="store_true",
        default=False,
        help="Print the some output but does not send any notification",
    )
    parser.add_argument(
        "--debug",
        dest="debug",
        action="store_true",
        default=False,
        help="Print the debugging output",
    )
    parser.add_argument(
        "--msgtest",
        dest="msgtest",
        action="store_true",
        default=False,
        help="Try send test msg",
    )
    args = parser.parse_args()

    if args.msgtest:
        do_msgtest()
    else:
        main(check=args.check, debug=args.debug)

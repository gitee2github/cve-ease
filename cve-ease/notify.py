#!/usr/bin/python3

import base64
import datetime
import hashlib
import hmac
import json
import subprocess
import time
import urllib.parse
import requests
import os

secret = ''
token = ''
oldRecord = ''
# for status notify
status_secret=''
status_token=''


def dingtalk(message):
    message = "Message from cve-ease: \n" + \
              "当前时间 %s" % datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒") + "\n" \
              + message

    timestamp = str(round(time.time() * 1000))
    secret_enc = secret.encode('utf-8')
    string_to_sign = '{}\n{}'.format(timestamp, secret)
    string_to_sign_enc = string_to_sign.encode('utf-8')
    hmac_code = hmac.new(secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()
    sign = urllib.parse.quote_plus(base64.b64encode(hmac_code))
    webhook = '{}&timestamp={}&sign={}'.format(
        token, timestamp, sign)
    headers = {'Content-Type': 'application/json'}
    data = {
        "msgtype": "text",
        "text": {
            "content": message,
        },
    }

    x = requests.post(url=webhook, data=json.dumps(data), headers=headers)
    if x.json()["errcode"] == 0:
        return True
    else:
        return False


def dingtalkTop10(message):
    global status_secret, status_token
    message = "Message from CTyunOS ease: \n" + \
              "当前时间 %s" % datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒") + "\n" \
              + message

    timestamp = str(round(time.time() * 1000))
    secret_enc = status_secret.encode('utf-8')
    string_to_sign = '{}\n{}'.format(timestamp, status_secret)
    string_to_sign_enc = string_to_sign.encode('utf-8')
    hmac_code = hmac.new(secret_enc, string_to_sign_enc, digestmod=hashlib.sha256).digest()
    sign = urllib.parse.quote_plus(base64.b64encode(hmac_code))
    webhook = '{}&timestamp={}&sign={}'.format(
        status_token, timestamp, sign)
    headers = {'Content-Type': 'application/json'}
    data = {
        "msgtype": "text",
        "text": {
            "content": message,
        },
    }

    x = requests.post(url=webhook, data=json.dumps(data), headers=headers)
    if x.json()["errcode"] == 0:
        return True
    else:
        return False


def runcmd(command, timeout=60):
    ret = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8",
                         timeout=timeout)
    if ret.returncode == 0:
        return (0, ret)
    else:
        return (1, ret)


def log(logstr):
    logfilefullpath = "/var/log/ease/log"
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(logfilefullpath, "a+") as logfile:
        logsize = os.path.getsize(logfilefullpath)
        if logsize > 1024 * 1024 * 10:
            logfile.seek(0)
            logfile.truncate()
            logfile.write(" %s : truncate file \n" % (timestamp))
        logfile.write(" %s : %s \n" % (timestamp, logstr))

def is_between_time(begin_time, end_time):
    # "22:00:00", "8:00:00"
    now = time.strftime('%H:%M:%S')
    # 若是在 "8:00:00" - "22:00:00"
    if end_time < now < begin_time:
        return False
    else:
        return True

def loop():
    global oldRecord
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # 夜间22点-第二天早上8点，期间暂停更新，08 不可写为8,
    if (is_between_time("22:00:00", "08:00:00")):
        log("sleep time between 22:00:00 ~ 08:00:00")
        time.sleep(60)
        return

    data = ""
    data += "--------------------" + "\n"
    # 超时为5分钟，300秒
    (retcode, result) = runcmd("/usr/bin/ease-cve -u", timeout=300)
    if retcode == 0:
        data += "Update metadata success\n"
    else:
        data += "Update metadata failed!\n" + str(result) + "\n"
    log(str(timestamp) + " step 1 update metadata")
    data += "--------------------" + "\n"
    # 超时为60秒，默认
    (retcode, result) = runcmd("/usr/bin/ease-cve -l -n 1")
    log(str(timestamp) + " step 2 get new cve")

    if retcode == 0:
        data += result.stdout
    else:
        data += result.stderr

    # 获取top10，每次发送
    (retcode, result) = runcmd("/usr/bin/ease-cve -e")
    if retcode == 0:
        data += result.stdout
    else:
        data += result.stderr
    dingtalkTop10(data)

    if oldRecord == "":
        oldRecord = result.stdout
        dingtalk(data)
        return
    if oldRecord != result.stdout:
        dingtalk(data)
        oldRecord = result.stdout
        return

    log("no update, sleep 60")
    # 若结果一致，则不care
    time.sleep(60)


if __name__ == "__main__":
    if '' == secret or '' == token:
        log("No dingding token/secret found!")
        exit(1)

    if '' == status_secret or '' == status_token:
        log("No dingding status_token/status_secret found!")
        exit(1)

    while true:
        try:
            loop()
        except Exception as e:
            log("Error : %s" % str(e))

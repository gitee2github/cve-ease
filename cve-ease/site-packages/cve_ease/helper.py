# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""
import os.path
from .config import OPENEULER_PRODUCT_REPO_MAP
from .errors import InputDirNotDirError
import datetime
import fcntl


def one_instance_check(lockfile):
    """
    Helper function for one instance checking
    """
    running_status = False
    lock_file_pointer = os.open(lockfile, os.O_CREAT | os.O_WRONLY)
    try:
        fcntl.lockf(lock_file_pointer, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        running_status = True
    return running_status


def get_timestamp():
    """
    Helper function for getting timestamp
    """
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def data_to_csv(list_of_dict, column_list):
    """
    Helper function for dict to csv
    """
    import pandas as pd
    df = pd.DataFrame(list_of_dict)
    df.columns = column_list
    return df.to_csv(index=False)


def to_list(lst):
    """
    Helper function for py2/py3 compatibility
    """
    if isinstance(lst, list):
        return lst
    else:
        return list(lst)


def makesure_direxists(path):
    """
    Helper function for makesure_direxists
    """
    if os.path.isfile(path):
        print("file")
        dirname = os.path.basename(path)
    if os.path.isdir(path):
        print("path")
        if not os.path.exists(path):
            os.makedirs(dir, exist_ok=True)


def ensuredir(dir):
    """Make sure dir exists"""
    dir = os.path.normpath(dir)
    if os.path.exists(dir):
        if not os.path.isdir(dir):
            raise InputDirNotDirError("Not a dir: %s" % dir)
    else:
        try:
            os.makedirs(dir, exist_ok=True)
        except Exception as e:
            raise CreateWorkdirError("Create workdir %s error %s" % (dir, str(e)))


def parseRPM(rpm_filename):
    """parse RPM package"""
    if rpm_filename[-4:] == '.rpm':
        rpm_filename = rpm_filename[:-4]

    archIndex = rpm_filename.rfind('.')
    arch = rpm_filename[archIndex + 1:]

    relIndex = rpm_filename[:archIndex].rfind('-')
    rel = rpm_filename[relIndex + 1:archIndex]

    verIndex = rpm_filename[:relIndex].rfind('-')
    ver = rpm_filename[verIndex + 1:relIndex]

    epochIndex = rpm_filename.find(':')
    if epochIndex == -1:
        epoch = ''
    else:
        epoch = rpm_filename[:epochIndex]

    name = rpm_filename[epochIndex + 1:verIndex]
    return name, ver, rel, epoch, arch


def srpm_version_compare(old_srpm, new_srpm):
    """compare srpm version"""
    import rpm
    _, over, orel, oepoch, _ = parseRPM(old_srpm)
    _, nver, nrel, nepoch, _ = parseRPM(new_srpm)

    """
    version_utils.rpm.labelCompare(evr_a, evr_b)[source]
    Convenience function to provide the same behaviour as labelCompare from rpm-python.
    
    To be used as a drop-in replacement for labelCompare, thus the utilization of the non-standard camelCase variable name.
    
    To use the version_utils version and fall back to rpm:
    
    try:
        from version_utils.rpm import labelCompare
    except ImportError:
        from rpm import labelCompare

    Parameters:	
        evr_a (tuple) – an EVR tuple
        evr_b (tuple) – an EVR tuple

    """

    if rpm.labelCompare((oepoch, over, orel), (nepoch, nver, nrel)) < 0:
        return True
    return False


def find_higest_srpm_version(srpmnamelist):
    if 0 == len(srpmnamelist):
        Exception(" list can't be null")
    if 1 == len(srpmnamelist):
        return srpmnamelist[0]
    import rpm
    import functools

    def compare(old_srpm, new_srpm):
        """compare srpm version"""
        _, over, orel, oepoch, _ = parseRPM(old_srpm)
        _, nver, nrel, nepoch, _ = parseRPM(new_srpm)
        ret = rpm.labelCompare((oepoch, over, orel), (nepoch, nver, nrel))
        if ret < 0:
            return 1
        elif ret > 0:
            return -1
        else:
            return 0

    return sorted(srpmnamelist, key=functools.cmp_to_key(compare))[0]


def check_product(gconfig, options):
    productId = None
    # check repodata with cvrf, find diff
    if options.product:
        if options.product not in OPENEULER_PRODUCT_REPO_MAP:
            print("Unsupported product :", options.product)
            print("Support product:", "\n\t".join(p for p in OPENEULER_PRODUCT_REPO_MAP))
            exit(1)
        productId = options.product
    elif gconfig.PRODUCT:
        if gconfig.PRODUCT not in OPENEULER_PRODUCT_REPO_MAP:
            print("Unsupported product :", gconfig.PRODUCT)
            print("Support product:", "\n\t".join(p for p in OPENEULER_PRODUCT_REPO_MAP))
            exit(1)
        productId = gconfig.PRODUCT

    if not productId:
        print("no product found, you should use -p to specific it.")
        print("Support product:", "\n\t".join(p for p in OPENEULER_PRODUCT_REPO_MAP))
        exit(1)

    return productId

# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""
import os
from optparse import OptionParser
from cve_ease_dev import activate_session, Scraper
from sqlalchemy import select
import logging
import json
from cve_ease_dev.models import CVRFXML

logger = logging.getLogger('cve-ease')


def get_usage_str(usage):
    return usage + "\n(Specify the --help global option for a list of other help options)"


def purge_output():
    if os.path.exists('output'):
        import shutil
        shutil.rmtree('output')


def handle_cvrf(gconfig, db_session, args):
    usage = "usage: %prog cvrf <options>"
    parser = OptionParser(usage=get_usage_str(usage))

    parser.add_option('-d', '--download', dest='download', action='store_true', default=False,
                      help='download cvrf as xml file')
    parser.add_option('-p', '--purge', dest='purge', action='store_true', default=False,
                      help='purge old download')
    parser.add_option('-r', '--rawdata', dest='raw', action='store_true', default=False,
                      help='get cvrf cache and print raw data without write db')
    parser.add_option('-m', '--makecache', dest='makecache', action='store_true', default=False,
                      help='get cvrf cache')
    parser.add_option('-l', '--list', dest='list', action='store_true', default=False,
                      help='list all cvrf info')
    parser.add_option('-t', '--total', dest='total', action='store_true', default=False,
                      help='get total cvrf record number')
    parser.add_option('-c', '--check', dest='check', action='store_true', default=False,
                      help='check unfix cve in cvrf')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False,
                      help='show verbose output')

    (options, args) = parser.parse_args(args)

    # session = activate_session(db_session, gconfig)
    # if gconfig.debug:
    #     print("active sql session")

    if options.makecache:
        scraper = Scraper()
        for (index, no, left, cvrf) in scraper.scrapyCVRF():
            print(index)
            cvrf_handler = CVRFXML(cvrf)
            print(cvrf_handler.node_get_securityNoticeNo())
            print(cvrf_handler.node_get_affectedComponent())
            print(cvrf_handler.node_get_cve_list())
            print(cvrf_handler.node_get_affectedProduct())
            print(cvrf_handler.node_get_fixedPackage())
            print()
            print()
            print()
    elif options.download:
        scraper = Scraper()
        if options.purge:
            purge_output()
        os.makedirs('output', mode=0o777, exist_ok=True)
        for (index, no, left, cvrf) in scraper.scrapyCVRF():
            index_dir = os.path.dirname(index)
            os.makedirs(os.path.join('output', index_dir), mode=0o777, exist_ok=True)
            file_path = os.path.join('output', index)
            with open(file_path, 'w') as wf:
                wf.write(cvrf)
            print("[%5d/%-5d] Download OK! Write to %s" % (no, left, file_path))
        # TODO multi-task download, not single thread
    elif options.raw:
        scraper = Scraper()
        for (index, no, left, cvrf) in scraper.scrapyCVRF():
            print("%s" % os.path.basename(index))
            print(cvrf)
    elif options.check:
        print("check unfix cve in current os")

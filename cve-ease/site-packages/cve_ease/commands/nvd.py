# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""
import os
from optparse import OptionParser
from cve_ease import activate_session, Scraper
from cve_ease.models import NVD
from cve_ease.helper import one_instance_check, download_file, ungzfile
import logging
import json

logger = logging.getLogger('cve-ease')


def get_usage_str(usage):
    return usage + "\n(Specify the --help global option for a list of other help options)"


def handle_nvd(gconfig, db_session, args):
    """[info] NVD info"""

    # one instance
    lock = one_instance_check(gconfig.LOCK_FILE_PATH)
    if lock:
        raise Exception(f"Another cve-ease already running")

    usage = "usage: %prog nvd <options>"
    parser = OptionParser(usage=get_usage_str(usage))

    parser.add_option('-m', '--makecache', dest='makecache', action='store_true', default=False,
                      help='get nvd cache')
    parser.add_option('-l', '--list', dest='list', action='store_true', default=False,
                      help='list all nvd info')
    parser.add_option('--cleancache', dest='cleancache', action='store_true', default=False,
                      help='clean all nvd cache')
    parser.add_option('-t', '--total', dest='total', action='store_true', default=False,
                      help='get nvd info statistics')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False,
                      help='show verbose output')

    (options, args) = parser.parse_args(args)

    if options.makecache:
        nvd_makecahe(gconfig, db_session)
    elif options.cleancache:
        if os.path.exists(gconfig.NVD_CACHE_PATH):
            os.removedirs()
        os.makedirs(gconfig.NVD_CACHE_PATH, exist_ok=True)
        print(" Clean %s done!" % gconfig.NVD_CACHE_PATH)
    elif options.total:
        pass
    elif options.list:
        pass
    else:
        parser.print_help()


def nvd_makecahe(gconfig, db_session):
    os.makedirs(gconfig.NVD_CACHE_PATH, exist_ok=True)
    import datetime, gzip
    year = datetime.datetime.today().year
    for y in [str(y) for y in range(2005, year + 1)] + ['Modified']:
        targetfilename = "nvdcve-1.1-%s.json.gz" % str(y)
        download_url = os.path.join(gconfig.NVD_BASE_URL, targetfilename)
        save_to = os.path.join(gconfig.NVD_CACHE_PATH, targetfilename)
        save_ungzfile = save_to[:-3]
        print("download %s to %s" % (download_url, save_to))
        download_file(download_url, save_to)
        print("  ungz file to", save_ungzfile)
        ungzfile(save_to, save_ungzfile)

    session = activate_session(db_session, gconfig)
    if gconfig.debug:
        print(" * active sql session")

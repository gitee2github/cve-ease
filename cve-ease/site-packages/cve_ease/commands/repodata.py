# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""
import os
from optparse import OptionParser
from cve_ease import activate_session, Scraper
import logging
from cve_ease.helper import one_instance_check, parseRPM, srpm_version_compare, find_higest_srpm_version
from cve_ease.models import Repos, Repo, Package, RPM, SRPM, CVRFXML, CVRF, PRODUCT
import json
from sqlalchemy.sql import text

logger = logging.getLogger('cve-ease')


def get_usage_str(usage):
    return usage + "\n(Specify the --help global option for a list of other help options)"


openeuler_product_map = {
    'openEuler-20.03-LTS-SP1': [
        "https://mirrors.tuna.tsinghua.edu.cn/openeuler/openEuler-20.03-LTS-SP1/everything/x86_64/",
        "https://mirrors.tuna.tsinghua.edu.cn/openeuler/openEuler-20.03-LTS-SP1/update/x86_64/",
    ],
    'openEuler-20.03-LTS': [
        "https://mirrors.tuna.tsinghua.edu.cn/openeuler/openEuler-20.03-LTS/everything/x86_64/",
        "https://mirrors.tuna.tsinghua.edu.cn/openeuler/openEuler-20.03-LTS/update/x86_64/",
    ],
}


def parser_repo(product_id):
    repos = Repos()
    for repo in openeuler_product_map[product_id]:
        print("makecache %s" % repo)
        repos.addrepo(repo)
    return repos


def handle_repodata(gconfig, db_session, args):
    """[info] Repodata info"""
    # one instance
    lock = one_instance_check(gconfig.LOCK_FILE_PATH)
    if lock:
        raise Exception(f"Another cve-ease already running")

    usage = "usage: %prog repodata <options>"
    parser = OptionParser(usage=get_usage_str(usage))

    parser.add_option('-m', '--makecache', dest='makecache', action='store_true', default=False,
                      help='Cache repodata to database')
    parser.add_option('-t', '--total', dest='total', action='store_true', default=False,
                      help='Get total rpm statistic')
    parser.add_option('-l', '--list', dest='list', action='store_true', default=False,
                      help='List all rpm')
    parser.add_option('-c', '--check', dest='check', action='store_true', default=False,
                      help='Check repo cve')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False,
                      help='Show verbose output')

    (options, args) = parser.parse_args(args)

    session = activate_session(db_session, gconfig)
    if gconfig.debug:
        print("active sql session")

    if options.makecache:
        repos = parser_repo('openEuler-20.03-LTS-SP1')
        allpkglist = repos.list()
        srpm_listdict = {}
        for index, (url, pkg) in enumerate(allpkglist):
            rpm = RPM()

            rpm.sourcerpm = pkg.sourcerpm
            rpm.sname, rpm.sver, rpm.srel, rpm.sepoch, rpm.sarch = parseRPM(rpm.sourcerpm)

            rpm.rpmname = pkg.rpmname
            rpm.name, rpm.ver, rpm.rel, rpm.epoch, rpm.arch = parseRPM(rpm.rpmname)

            rpm.location = pkg.location
            rpm.downloadurl = os.path.join(url, pkg.location)

            session.add(rpm)
            session.commit()

            if rpm.sname not in srpm_listdict:
                srpm_listdict[rpm.sname] = [rpm.sourcerpm]
            else:
                if rpm.sourcerpm not in srpm_listdict[rpm.sname]:
                    srpm_listdict[rpm.sname].append(rpm.sourcerpm)

            print("[%6d/%-6d] Cache OK! %s" % (index + 1, len(allpkglist) - index - 1, pkg.rpmname))

        # print(json.dumps(srpm_listdict, indent=4))
        print(" * organize cache")
        for srpm in srpm_listdict:
            max_version = find_higest_srpm_version(srpm_listdict[srpm])
            srpm = SRPM()
            srpm.sourcerpm = max_version
            srpm.sname, srpm.sver, srpm.srel, srpm.sepoch, srpm.sarch = parseRPM(max_version)
            session.add(srpm)
            session.commit()
        print(" * cache SRPM table done!")
    elif options.list:
        rpmlist = session.query(RPM).all()
        if 0 == len(rpmlist):
            print(" WARNNING: no rpm cache found! you should run 'cve-ease repodata -m' to cache it.")
            return
        for pkg in rpmlist:
            print(pkg.rpmname, pkg.sourcerpm, pkg.sname)
            print(pkg.downloadurl)
    elif options.total:
        total = session.query(RPM).count()
        print("rpm total record :", total)
        if 0 == total:
            print(" WARNNING: no rpm cache found! you should run 'cve-ease repodata -m' to cache it.")
        total = session.query(SRPM).count()
        print("srpm total record :", total)
        if 0 == total:
            print(" WARNNING: no srpm cache found! you should run 'cve-ease repodata -m' to cache it.")
    elif options.check:
        # check repodata with cvrf, find diff

        # SRPM store higest/uniq srpm info
        repodata_srpm = session.query(SRPM).all()
        from sqlalchemy import and_
        for srpm in repodata_srpm:

            product_cvrf_srpm = session.query(PRODUCT).filter(
                and_(PRODUCT.productId == 'openEuler-22.03-LTS', PRODUCT.packageName == srpm.sname)
            ).all()
            if len(product_cvrf_srpm):
                print(" * check ", srpm.sourcerpm)
            for cvrf_srpm in product_cvrf_srpm:
                if srpm_version_compare(srpm.sourcerpm, cvrf_srpm.srcfilename):
                    print("  Higher version found :", cvrf_srpm.srcfilename)

        print("check done!")
    else:
        parser.print_help()

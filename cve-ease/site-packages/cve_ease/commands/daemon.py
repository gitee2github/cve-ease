# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""

from optparse import OptionParser
from cve_ease import activate_session, Scraper
from cve_ease.models import CVE, SA, CVELOG, SALOG
from cve_ease.helper import one_instance_check, get_timestamp
from cve_ease.notifier import NotifierBase, Wecom, Dingding, Mail163, Feishu

import logging
import json
import datetime

logger = logging.getLogger('cve-ease')


def get_usage_str(usage):
    return usage + "\n(Specify the --help global option for a list of other help options)"


def compare(last_dict_list_str, newer_dict_list_str, sorted_by):
    diff = {
        "modify": [],
        "add": [],
        "delete": [],
        "data": [],
    }
    newer_dict_list = json.loads(newer_dict_list_str)
    last_dict_list = json.loads(last_dict_list_str)
    map_newer_dict_list = {}
    map_last_dict_list = {}

    for rd in newer_dict_list:
        map_newer_dict_list[rd[sorted_by]] = rd
    for rd in last_dict_list:
        map_last_dict_list[rd[sorted_by]] = rd

    for cveId in map_newer_dict_list.keys():
        if cveId not in map_last_dict_list:
            diff['add'].append(map_newer_dict_list[cveId])
            continue
        for key in map_newer_dict_list[cveId].keys():
            if map_newer_dict_list[cveId][key] != map_last_dict_list[cveId][key]:
                diff['modify'].append(map_newer_dict_list[cveId])
                break
    for cveId in map_last_dict_list.keys():
        if cveId not in map_newer_dict_list:
            diff['delete'].append(map_last_dict_list[cveId])
    diff['data'] = newer_dict_list
    return diff


def pretty_cve_diff(gconfig, diff: dict):
    output = ""

    newlist = sorted(diff["add"], key=lambda d: d['id'])
    modifylist = sorted(diff["modify"], key=lambda d: d['id'])
    dellist = sorted(diff["delete"], key=lambda d: d['id'])

    output += "Message from CTyunOS CVE-EASE:\n"
    output += str(get_timestamp()) + '\n'
    output += "新增:%d 修改:%d 删除:%d\n" % (
        len(diff["add"]), len(diff["modify"]), len(diff["delete"])
    )
    output += "CVE 更新记录:\n\n"
    notifier_record_num = int(gconfig.NOTIFIER_RECORD_NUM)
    changelist = newlist + modifylist
    for cve in changelist[:notifier_record_num]:
        output += """CVEID: %s
  Score:%s 
  PKGS: %s
  Time: %s
  Link: https://www.openeuler.org/zh/security/cve/detail/?cveId=%s&packageName=%s

""" % (
            cve["cveId"],
            cve["cvsssCoreNVD"] if cve["cvsssCoreNVD"] else cve["cvsssCoreOE"],
            cve["packageName"],
            cve["updateTime"],
            cve["cveId"],
            cve["packageName"],
        )
    return output


def pretty_sa_diff(gconfig, diff: dict):
    output = ""

    newlist = sorted(diff["add"], key=lambda d: d['id'])
    modifylist = sorted(diff["modify"], key=lambda d: d['id'])
    dellist = sorted(diff["delete"], key=lambda d: d['id'])

    output += "Message from CTyunOS CVE-EASE:\n"
    output += str(get_timestamp()) + '\n'
    output += "新增:%d 修改:%d 删除:%d\n" % (
        len(diff["add"]), len(diff["modify"]), len(diff["delete"])
    )
    output += "SA 更新记录:\n\n"

    notifier_record_num = int(gconfig.NOTIFIER_RECORD_NUM)
    changelist = newlist + modifylist
    for sa in changelist[:notifier_record_num]:
        output += """SAID: %s
  PKGS: %s
  CVEID: %s
  Time: %s
  Link: https://www.openeuler.org/zh/security/safety-bulletin/detail/?id=%s

""" % (
            sa["securityNoticeNo"],
            sa["affectedComponent"],
            sa["cveId"],
            sa["updateTime"],
            sa["securityNoticeNo"],
        )
    return output


def cve_notifier(gconfig, diff: dict):
    for subclass in NotifierBase.__subclasses__():
        notifier_instance = subclass(gconfig)
        notifier_instance.do_cve_notifier(diff)


def sa_notifier(gconfig, diff: dict):
    for subclass in NotifierBase.__subclasses__():
        notifier_instance = subclass(gconfig)
        notifier_instance.do_sa_notifier(diff)


def handle_daemon(gconfig, db_session, args):
    """[basic] Run as daemon without interactive"""

    # one instance
    lock = one_instance_check(gconfig.LOCK_FILE_PATH)
    if lock:
        raise Exception(f"Another ease already running")
    usage = "usage: %prog daemon <options>"
    parser = OptionParser(usage=get_usage_str(usage))

    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False,
                      help='show verbose output')

    (options, args) = parser.parse_args(args)

    session = activate_session(db_session, gconfig)
    logger.debug(" * active db sql session")

    scraper = Scraper()
    response = scraper.scrapyCVE()
    if "code" in response and response["code"] == 0:
        logger.debug(" * scrapy CVE from OpenEuler done")
        totalCount = response["result"]["totalCount"]
        logger.debug(" * total record num: %d" % totalCount)
        cveDatabaseList = response["result"]["cveDatabaseList"]

        count = session.query(CVELOG).count()
        if count == 0:
            # recreate CVE db
            CVE.__table__.drop(db_session.get_engine())
            CVE.__table__.create(db_session.get_engine())
            session.bulk_insert_mappings(CVE, cveDatabaseList)
            session.commit()
            # add cvelog
            log = CVELOG()
            log.code = response["code"]
            log.msg = response["msg"]
            log.totalCount = response["result"]["totalCount"]
            log.cveDatabaseList = json.dumps(response["result"]["cveDatabaseList"])
            session.add(log)
            session.commit()
        else:
            # find last one
            last_cve_record = session.query(CVELOG).order_by(CVELOG.id.desc()).first()

            # for test
            # last_cve_record.cveDatabaseList = last_cve_record.cveDatabaseList.replace('CVE-2022-4645', 'CVE-9999-8888')

            if last_cve_record.cveDatabaseList != json.dumps(cveDatabaseList):
                logger.debug(" * cve updated!")
                # recreate CVE db
                CVE.__table__.drop(db_session.get_engine())
                CVE.__table__.create(db_session.get_engine())
                session.bulk_insert_mappings(CVE, cveDatabaseList)
                session.commit()

                # compare old/new record
                diff = compare(last_cve_record.cveDatabaseList, json.dumps(cveDatabaseList), sorted_by='cveId')
                # notifier alert update info
                if len(diff['add']) > 0 or len(diff['modify']) > 0 or len(diff['delete']) > 0:
                    cve_notifier(gconfig, diff)

                # add cve updated log
                log = CVELOG()
                log.code = response["code"]
                log.msg = response["msg"]
                log.totalCount = response["result"]["totalCount"]
                log.cveDatabaseList = json.dumps(response["result"]["cveDatabaseList"])
                log.add = len(diff["add"])
                log.delete = len(diff["delete"])
                log.modify = len(diff["modify"])

                session.add(log)
                session.commit()
            else:
                logger.debug(" * cve without updated!")
            # clean old record
            expiration_days = int(gconfig.EXPIRATION_DAYS)
            limit = datetime.datetime.now() - datetime.timedelta(days=expiration_days)
            session.query(CVELOG).filter(CVELOG.created_at <= limit).delete()
            session.commit()

    else:
        logger.error("cve scrapy response error! no usefull info found!")
        exit(1)

    response = scraper.scrapySA()
    if "code" in response and response["code"] == 0:
        logger.debug(" * scrapy SA from OpenEuler done")
        totalCount = response["result"]["totalCount"]
        logger.debug(" * total record num: %d" % totalCount)
        securityNoticeList = response["result"]["securityNoticeList"]

        count = session.query(SALOG).count()
        if count == 0:
            # recreate sa db
            SA.__table__.drop(db_session.get_engine())
            SA.__table__.create(db_session.get_engine())
            session.bulk_insert_mappings(SA, securityNoticeList)
            session.commit()
            # add salog
            log = SALOG()
            log.code = response["code"]
            log.msg = response["msg"]
            log.totalCount = response["result"]["totalCount"]
            log.securityNoticeList = json.dumps(response["result"]["securityNoticeList"])
            session.add(log)
            session.commit()
        else:
            # find last one
            last_sa_record = session.query(SALOG).order_by(SALOG.id.desc()).first()

            # for test
            # last_sa_record.securityNoticeList = last_sa_record.securityNoticeList.replace('openEuler-SA-2023-1065',
            #                                                                               'openEuler-SA-9999-8888')
            # last_sa_record.securityNoticeList = last_sa_record.securityNoticeList.replace('openEuler-SA-2023-1146',
            #                                                                               'openEuler-SA-3999-3888')

            if last_sa_record.securityNoticeList != json.dumps(securityNoticeList):
                logger.debug(" * sa updated!")
                # recreate SA db
                SA.__table__.drop(db_session.get_engine())
                SA.__table__.create(db_session.get_engine())
                session.bulk_insert_mappings(SA, securityNoticeList)
                session.commit()

                # compare old/new record
                diff = compare(last_sa_record.securityNoticeList, json.dumps(securityNoticeList),
                               sorted_by='securityNoticeNo')

                # notifier alert update info
                if len(diff['add']) > 0 or len(diff['modify']) > 0 or len(diff['delete']) > 0:
                    sa_notifier(gconfig, diff)

                # add sa updated log
                log = SALOG()
                log.code = response["code"]
                log.msg = response["msg"]
                log.totalCount = response["result"]["totalCount"]
                log.securityNoticeList = json.dumps(response["result"]["securityNoticeList"])
                log.add = len(diff["add"])
                log.delete = len(diff["delete"])
                log.modify = len(diff["modify"])

                session.add(log)
                session.commit()
            else:
                logger.debug(" * sa without updated!")
            # clean old record
            expiration_days = int(gconfig.EXPIRATION_DAYS)
            limit = datetime.datetime.now() - datetime.timedelta(days=expiration_days)
            session.query(SALOG).filter(SALOG.created_at <= limit).delete()
            session.commit()
    else:
        logger.error("sa scrapy response error! no usefull info found!")
        exit(1)

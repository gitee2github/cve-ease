# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""

from optparse import OptionParser
from cve_ease_dev import activate_session, Scraper
from cve_ease_dev.models import CVE, SA, CVELOG, SALOG
from cve_ease_dev.helper import one_instance_check
import logging
import json
import datetime

logger = logging.getLogger('cve-ease')


def get_usage_str(usage):
    return usage + "\n(Specify the --help global option for a list of other help options)"


def handle_daemon(gconfig, db_session, args):
    """[basic] Run as daemon without interactive"""

    # one instance
    lock = one_instance_check(gconfig.LOCK_FILE_PATH)
    if lock:
        raise Exception(f"Another ease already running")
    usage = "usage: %prog daemon <options>"
    parser = OptionParser(usage=get_usage_str(usage))

    parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False,
                      help='show verbose output')

    (options, args) = parser.parse_args(args)

    session = activate_session(db_session, gconfig)
    if gconfig.debug:
        logger.debug(" * active db sql session")

    scraper = Scraper()
    response = scraper.scrapyCVE()
    if "code" in response and response["code"] == 0:
        logger.debug(" * scrapy CVE from OpenEuler done")
        totalCount = response["result"]["totalCount"]
        logger.debug(" * total record num: %d" % totalCount)
        cveDatabaseList = response["result"]["cveDatabaseList"]

        count = session.query(CVELOG).count()
        if count == 0:
            # recreate CVE db
            CVE.__table__.drop(db_session.get_engine())
            CVE.__table__.create(db_session.get_engine())
            session.bulk_insert_mappings(CVE, cveDatabaseList)
            session.commit()
            # add cvelog
            log = CVELOG()
            log.code = response["code"]
            log.msg = response["msg"]
            log.totalCount = response["result"]["totalCount"]
            log.cveDatabaseList = json.dumps(response["result"]["cveDatabaseList"])
            session.add(log)
            session.commit()
        else:
            # find last one
            last_cve_record = session.query(CVELOG).order_by(CVELOG.id.desc()).first()

            if last_cve_record.cveDatabaseList != str(cveDatabaseList):
                # recreate CVE db
                CVE.__table__.drop(db_session.get_engine())
                CVE.__table__.create(db_session.get_engine())
                session.bulk_insert_mappings(CVE, cveDatabaseList)
                session.commit()
                # add cvelog
                log = CVELOG()
                log.code = response["code"]
                log.msg = response["msg"]
                log.totalCount = response["result"]["totalCount"]
                log.cveDatabaseList = json.dumps(response["result"]["cveDatabaseList"])
                session.add(log)
                session.commit()
            # clean old record
            expiration_days = int(gconfig.EXPIRATION_DAYS)
            limit = datetime.datetime.now() - datetime.timedelta(days=expiration_days)
            session.query(CVELOG).filter(CVELOG.created_at <= limit).delete()
            session.commit()

    else:
        logger.error("cve scrapy response error! no usefull info found!")
        exit(1)

    response = scraper.scrapySA()
    if "code" in response and response["code"] == 0:
        logger.debug(" * scrapy SA from OpenEuler done")
        totalCount = response["result"]["totalCount"]
        logger.debug(" * total record num: %d" % totalCount)
        securityNoticeList = response["result"]["securityNoticeList"]

        count = session.query(SALOG).count()
        if count == 0:
            # recreate sa db
            SA.__table__.drop(db_session.get_engine())
            SA.__table__.create(db_session.get_engine())
            session.bulk_insert_mappings(SA, securityNoticeList)
            session.commit()
            # add salog
            log = SALOG()
            log.code = response["code"]
            log.msg = response["msg"]
            log.totalCount = response["result"]["totalCount"]
            log.securityNoticeList = json.dumps(response["result"]["securityNoticeList"])
            session.add(log)
            session.commit()

        else:
            # find last one
            last_sa_record = session.query(SALOG).order_by(SALOG.id.desc()).first()

            if last_sa_record.securityNoticeList != str(last_sa_record):
                # recreate SA db
                SA.__table__.drop(db_session.get_engine())
                SA.__table__.create(db_session.get_engine())
                session.bulk_insert_mappings(SA, securityNoticeList)
                session.commit()
                # add salog
                log = SALOG()
                log.code = response["code"]
                log.msg = response["msg"]
                log.totalCount = response["result"]["totalCount"]
                log.securityNoticeList = json.dumps(response["result"]["securityNoticeList"])
                session.add(log)
                session.commit()

            # clean old record
            expiration_days = int(gconfig.EXPIRATION_DAYS)
            limit = datetime.datetime.now() - datetime.timedelta(days=expiration_days)
            session.query(SALOG).filter(SALOG.created_at <= limit).delete()
            session.commit()


    else:
        logger.error("sa scrapy response error! no usefull info found!")
        exit(1)
    session.close()

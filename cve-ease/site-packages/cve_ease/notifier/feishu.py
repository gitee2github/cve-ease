# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""
import requests
import json
from cve_ease_dev.helper import get_timestamp, data_to_csv
from cve_ease_dev.models import CVE, SA
import json
from .base import NotifierBase
import logging
import datetime

logger = logging.getLogger('cve-ease')


class Feishu(NotifierBase):
    """
    飞书群聊机器人
    官方文档：https://open.feishu.cn/document/ukTMukTMukTM/ucTM5YjL3ETO24yNxkjN?lang=zh-CN
    每个机器人每分钟最多发送20条消息到群里，如果超过20条，会限流10分钟。
    请妥善保存好此 webhook 地址，不要公布在Gitlab、博客等可公开查阅的网站上，避免地址泄露后被恶意调用发送垃圾消息
    """

    def __init__(self, gconfig, keyname='status_key'):
        self._config = gconfig

        self._key = None
        for (name, value) in gconfig.config['feishu'].items():
            if name == keyname:
                self._key = value

    def do_send(self, data):
        res = None
        headers = {'Content-Type': 'application/json; charset=utf-8'}
        url = f'https://open.feishu.cn/open-apis/bot/v2/hook/{self._key}'
        r = requests.post(url=url, headers=headers, data=json.dumps(data))
        try:
            res = json.loads(r.text)
        except:
            pass
        if r.status_code == 200 and res and 'StatusCode' in res and 0 == res['StatusCode']:
            logger.debug('[+] feishuBot send ok!')
        else:
            logger.error('[-] feishuBot send failed!')
            logger.error(r.text)

    def send_text(self, msg="", debug=False):
        data = {
            "msg_type": "text",
            "content": {
                # "text": 'cve-ease notifier: \n%s\n%s' % (get_timestamp(), msg),
                "text": msg,
            },
        }
        if debug:
            logger.debug(json.dumps(data, indent=4))
        self.do_send(data)

    def check_enabled(self):
        if 'enabled' not in self._config.config['feishu'] or "1" != self._config.config['feishu']['enabled']:
            logger.debug(' * feishu notifier is not enabled')
            return False
        return True

    def do_cve_notifier(self, diff):
        """
            diff = {
                "modify": [],
                "add": [],
                "delete": [],
                "data": [],
            }
        :param diff:
        :return:
        """
        if not self.check_enabled():
            return

        logger.debug(" feishu do_cve_notifier")

        self.send_text(self.pretty_cve_udpate(diff))

    def pretty_cve_record(self, record):
        return (
                "评分:[{}] {}\n" +
                " 包名: {}\n" +
                " 发布时间: {}\n" +
                " https://www.openeuler.org/zh/security/cve/detail/?cveId={}&packageName={}\n"
        ).format(
            record["cvsssCoreNVD"] if record["cvsssCoreNVD"] else record["cvsssCoreOE"],
            record["cveId"],
            record["packageName"],
            record["updateTime"],
            record["cveId"],
            record["packageName"],
        )

    def pretty_cve_udpate(self, diff):
        message = (
                "Msg from CVE-EASE: \n" +
                " {}\n" +
                "服务状态: OK\n" +
                "CVE记录总数: {}\n" +
                "更新情况:\n" +
                " 新增:{}" +
                " 修改:{}" +
                " 删减:{}\n" +
                "Top{}变更信息概况:\n" +
                "\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            len(diff["data"]),
            len(diff["add"]),
            len(diff["modify"]),
            len(diff["delete"]),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        addlist = sorted(diff["add"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["delete"], key=lambda d: d['id'])

        need_output_record_list = addlist + modifylist + dellist
        for r in need_output_record_list[:count]:
            message += self.pretty_cve_record(r)

        message += """\n相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。\n"""
        return message

    def do_sa_notifier(self, diff):
        """
            diff = {
                "modify": [],
                "add": [],
                "delete": [],
                "data": [],
            }
        :param diff:
        :return:
        """
        if not self.check_enabled():
            return

        logger.debug(" feishu do_sa_notifier")

        self.send_text(self.pretty_sa_udpate(diff))

    def pretty_sa_record(self, record):
        return (
                "编号:{}\n" +
                " 包名: {}\n" +
                " CVEID: {}\n" +
                " 发布时间: {}\n" +
                " https://www.openeuler.org/zh/security/safety-bulletin/detail/?id={}\n"
        ).format(
            record["securityNoticeNo"],
            record["affectedComponent"],
            record["cveId"],
            record["updateTime"],
            record["securityNoticeNo"],
        )

    def pretty_sa_udpate(self, diff):
        message = (
                "Msg from CVE-EASE: \n" +
                " {}\n" +
                "服务状态: OK\n" +
                "SA记录总数: {}\n" +
                "更新情况:\n" +
                " 新增:{}" +
                " 修改:{}" +
                " 删减:{}\n" +
                "Top{}变更信息概况:\n" +
                "\n"
        ).format(
            datetime.datetime.now().strftime("%Y年%m月%d日%H时%M分%S秒"),
            len(diff["data"]),
            len(diff["add"]),
            len(diff["modify"]),
            len(diff["delete"]),
            self._config.NOTIFIER_RECORD_NUM
        )
        count = int(self._config.NOTIFIER_RECORD_NUM)
        addlist = sorted(diff["add"], key=lambda d: d['id'])
        modifylist = sorted(diff["modify"], key=lambda d: d['id'])
        dellist = sorted(diff["delete"], key=lambda d: d['id'])

        need_output_record_list = addlist + modifylist + dellist
        for r in need_output_record_list[:count]:
            message += self.pretty_sa_record(r)

        message += """\n相关同事请务必及时修复漏洞，杜绝隐患保障系统安全。\n"""
        return message

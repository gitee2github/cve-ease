# -*- coding: utf-8 -*-

"""
 (c) 2023 - Copyright CTyunOS Inc

 Authors:
   youyifeng <youyf2@chinatelecom.cn>

"""

from .base import DBModel
from sqlalchemy import Column
from sqlalchemy import Text
from sqlalchemy import Integer
import re
import logging
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element
from xml.dom import minidom
import json


class CVRF(DBModel):
    __tablename__ = 'OpenEulerCVRF'

    id = Column('id', Integer, primary_key=True)
    securityNoticeNo = Column('securityNoticeNo', Text)
    affectedComponent = Column('affectedComponent', Text)
    cveId = Column('cveId', Text)
    affectedProduct = Column('affectedProduct', Text)
    packageName = Column('packageName', Text)

    # announcementTime = Column('announcementTime', Text)
    # description = Column('description', Text)
    # introduction = Column('introduction', Text)
    # referenceDocuments = Column('referenceDocuments', Text)
    # revisionHistory = Column('revisionHistory', Text)
    # subject = Column('subject', Text)
    # summary = Column('summary', Text)
    # type = Column('type', Text)
    # updateTime = Column('updateTime', Text)

    cvrf = Column('cvrf', Text)

    # packageHelperList = Column('packageHelperList', Text)
    # packageList = Column('packageList', Text)
    # referenceList = Column('referenceList', Text)
    # cveList = Column('cveList', Text)

    @staticmethod
    def pretty_output_title():
        print("%-20s %-30s %-10s %-20s" % ("securityNoticeID", "CVEID", "包名", "发布时间"))

    def pretty_output(self):
        print("%-20s %-30s %-10s %-20s" % (
            self.securityNoticeNo,
            self.cveId,
            self.packageName,
            self.updateTime,
        ))

    def simple_output(self):
        print("""SecurityNoticeNo: %s
CVEID: %s
包名: %s
发布时间: %s
详情链接: https://www.openeuler.org/zh/security/cve/detail/?cveId=%s&packageName=%s
""" % (
            self.securityNoticeNo,
            self.cveId,
            self.packageName,
            self.updateTime,
            self.cveId,
            self.packageName,
        ))


class CVRFXML(object):
    def __init__(self, cvrf_xml):
        rawxmldata = cvrf_xml
        rawxmldata = re.sub(' xmlns="[^"]+"', '', rawxmldata, count=0)
        rawxmldata = re.sub(' xmlns:cvrf="[^"]+"', '', rawxmldata, count=0)
        rawxmldata = re.sub(' xml:lang="[^"]+"', '', rawxmldata, count=0)
        rawxmldata = rawxmldata.replace('&', '&amp;')
        self.ctyunos_cvrf_xml = cvrf_xml
        self.root = ET.fromstring(rawxmldata)
        # self.repos = repos

    def showNode(self, node):
        print("tag: %s | attrib: %s | text: %s" % (node.tag, node.attrib, node.text))

    def node_get_securityNoticeNo(self):
        # self.showNode(node)
        path = 'DocumentTracking/Identification/ID'
        ret = self.root.find(path)

        if ret is not None:
            # print(ret.text)
            return ret.text
        else:
            raise Exception("%s is None" % path)

    def node_get_summary(self):
        # self.showNode(node)
        path = 'DocumentNotes/Note'
        ret = self.root.findall(path)
        for node in ret:
            if "Title" in node.attrib and node.attrib["Title"] == 'Synopsis':
                return node.text

        raise Exception("%s is None" % path)

    def node_get_announcetime(self):
        # self.showNode(node)
        path = 'DocumentTracking/CurrentReleaseDate'
        ret = self.root.find(path)

        if ret is not None:
            return ret.text
        else:
            raise Exception("%s is None" % path)

    def node_get_introduction(self):
        # self.showNode(node)
        path = 'DocumentTitle'
        ret = self.root.find(path)

        if ret is not None:
            # print(ret.text)
            return ret.text
        else:
            raise Exception("%s is None" % path)

    def node_get_description(self):
        # self.showNode(node)
        path = 'description'
        ret = self.root.find(path)

        if ret is not None:
            # print(ret.text)
            return ret.text
        else:
            raise Exception("%s is None" % path)

    def node_get_type(self):
        # self.showNode(node)
        path = 'DocumentNotes/Note'
        ret = self.root.findall(path)
        for node in ret:
            if "Title" in node.attrib and node.attrib["Title"] == 'Severity':
                return node.text

        raise Exception("%s is None" % path)

    def node_get_subject(self):
        # self.showNode(node)
        path = 'DocumentNotes/Note'
        ret = self.root.findall(path)
        for node in ret:
            if "Title" in node.attrib and node.attrib["Title"] == 'Topic':
                return node.text

        raise Exception("%s is None" % path)

    def node_get_description(self):
        # self.showNode(node)
        path = 'DocumentNotes/Note'
        ret = self.root.findall(path)
        for node in ret:
            if "Title" in node.attrib and node.attrib["Title"] == 'Description':
                return node.text

        raise Exception("%s is None" % path)

    def node_get_affectedComponent(self):
        # self.showNode(node)
        path = 'DocumentNotes/Note'
        ret = self.root.findall(path)
        for node in ret:
            if "Title" in node.attrib and node.attrib["Title"] == 'Affected Component':
                return node.text

        raise Exception("%s is None" % path)

    def showNode(self, node):
        print("tag: %s | attrib: %s | text: %s" % (node.tag, node.attrib, node.text))

    def node_get_reference_list(self):
        path = 'DocumentReferences/Reference'
        reference_list = []
        ret = self.root.findall(path)
        for node in ret:
            if "Type" in node.attrib and node.attrib["Type"] == 'Other':
                for child in node:
                    reference_list.append({
                        "url": child.text
                    })
        if len(reference_list) == 0:
            raise Exception("reference list is 0")
        return reference_list

    def node_get_cveId(self):
        path = 'Vulnerability/CVE'
        cve_list = set()
        ret = self.root.findall(path)
        for node in ret:
            cve_list.add(node.text)
        if len(cve_list) == 0:
            raise Exception("cve list is 0")
        return list(cve_list)

    def node_get_packageName(self):

        path = 'ProductTree/Branch'
        pkg_dict = {
            "src": set(),
            "aarch64": set(),
            "x86_64": set(),
            "noarch": set(),
        }
        ret = self.root.findall(path)
        for node in ret:
            if "Type" in node.attrib and node.attrib["Type"] == 'Package Arch':
                arch = node.attrib["Name"]
                if arch not in pkg_dict:
                    raise Exception("arch %s does't support" % node.attrib["Name"])
                for child in node:
                    pkg_dict[arch].add(child.text)

        # for item in pkg_dict:
        #     pkg_dict[item] = list(pkg_dict[item])
        # print(json.dumps(pkg_dict, indent=4))

        return pkg_dict

    def node_get_affectedProduct(self):
        path = 'ProductTree/Branch'
        pkg_dict = set()
        ret = self.root.findall(path)
        for node in ret:
            if "Type" in node.attrib and node.attrib["Type"] == 'Product Name':
                for child in node:
                    pkg_dict.add(child.text)

        return list(pkg_dict)

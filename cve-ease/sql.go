package main

import (
	"errors"
	"fmt"
	"github.com/jinzhu/gorm"
	_ "github.com/mattn/go-sqlite3"
)

// 删除重建数据库表
func RecreateDBTable(values ...interface{}) error {
	db, err := gorm.Open("sqlite3", DBFILENAME)
	if err != nil {
		fmt.Println(err.Error())
		return errors.New("failed to connect database")
	}
	defer db.Close()

	// 删除重建数据库表
	db.DropTableIfExists(values...)
	// 创建OpenEulerCVE表
	db.AutoMigrate(values...)

	return nil
}

func AddRecord(value interface{}) error {
	db, err := gorm.Open("sqlite3", DBFILENAME)
	if err != nil {
		fmt.Println(err.Error())
		return errors.New("failed to connect database")
	}
	defer db.Close()

	db.Create(value)

	return nil
}

func QueryRecord() ([]OpenEulerCVE, error) {
	db, err := gorm.Open("sqlite3", DBFILENAME)
	if err != nil {
		return nil, errors.New("failed to connect database")
	}
	defer db.Close()

	oec := make([]OpenEulerCVE,0)
	db.Find(&oec)

	return oec, nil
}
